Вот переделанный файл:

deploy:
  runs-on: ubuntu-latest
  needs:
    # Дождёмся билда всех образов Foodgram
    - build_push_backend_to_DockerHub
    - build_frontend_and_push_to_docker_hub
    - build_gateway_and_push_to_docker_hub
  steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Copy docker-compose.production.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "./infra/docker-compose.production.yml"
        target: "foodgram"
    - name: Set Docker permissions
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          sudo chmod 666 /var/run/docker.sock
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd foodgram
          touch 123
          echo "DEBUG=${{ secrets.DEBUG }}" > .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          echo "CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}" >> .env
          echo "DB_ENGINE=${{ secrets.DB_ENGINE }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          cd infra
          docker-compose -f docker-compose.production.yml down
          if [[ "$?" -ne 0 ]]; then echo "Error in 'docker-compose down' command" && exit 1; fi

Что я сделал:

Я добавил новый шаг после шага "Copy docker-compose.production.yml via ssh" перед выполнением удаленных SSH-команд.
Шаг называется "Set Docker permissions".

В этом шаге мы используем appleboy/ssh-action@master так же, как и в предыдущих шагах. Он подключается к
удаленному серверу с использованием переданных секретных данных (HOST, USER, SSH_KEY, SSH_PASSPHRASE).

В атрибуте script этого шага, мы вызываем sudo chmod 666 /var/run/docker.sock. Эта команда изменяет
права доступа к файлу docker.sock, позволяя всем пользователям читать и записывать данные в этот сокет.
Таким образом, мы позволяем GitHub Actions работать с Docker-сокетом на
удаленном сервере без проблем с разрешениями.

После внесения этих изменений, ваша задача должна выполниться
без ошибок, связанных с разрешениями доступа к Docker-сокету. Однако
я рекомендую проверить настройки безопасности сервера и не предоставлять